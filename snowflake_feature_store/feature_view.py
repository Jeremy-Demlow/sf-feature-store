"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/03_feature_view.ipynb.

# %% ../nbs/03_feature_view.ipynb 2
from __future__ import annotations
from typing import Dict, List, Optional, Union
from dataclasses import dataclass, field
from datetime import datetime
from snowflake.snowpark import DataFrame
from snowflake.ml.feature_store import FeatureView, Entity

from .core import create_version, create_feature_view_name


# %% auto 0
__all__ = ['FeatureViewConfig', 'FeatureViewBuilder', 'create_feature_view']

# %% ../nbs/03_feature_view.ipynb 3
@dataclass
class FeatureViewConfig:
    """Configuration for feature views
    
    Args:
        name: Base name for the feature view
        domain: Business domain (e.g., 'RETAIL', 'FINANCE')
        entity: Main entity name (e.g., 'CUSTOMER', 'PRODUCT')
        feature_type: Type of features (e.g., 'BEHAVIOR', 'PROFILE')
        major_version: Major version number
        minor_version: Minor version number
        refresh_frequency: How often to refresh features
        timestamp_col: Column name for temporal features
        description: Optional description of the feature view
        feature_descriptions: Descriptions of individual features
        selected_features: Optional list of features to include
    """
    name: str
    domain: str = ""
    entity: str = "CUSTOMER"
    feature_type: str = "BASE"
    major_version: int = 1
    minor_version: int = 0
    refresh_frequency: str = "1 day"
    timestamp_col: Optional[str] = None
    description: Optional[str] = None
    feature_descriptions: Optional[Dict[str, str]] = None
    selected_features: Optional[List[str]] = None
    tags: Dict[str, str] = field(default_factory=dict)
    
    def __post_init__(self):
        "Set derived attributes after initialization"
        self.full_name = create_feature_view_name(
            self.domain, self.entity, self.feature_type)
        self.version = create_version(self.major_version, self.minor_version)
        
        # Add default description if none provided
        if not self.description:
            self.description = f"Feature view {self.name}"
            
        # Add creation timestamp to tags
        self.tags['created_at'] = datetime.utcnow().isoformat()
        self.tags['feature_type'] = self.feature_type
        if self.domain:
            self.tags['domain'] = self.domain

# %% ../nbs/03_feature_view.ipynb 4
class FeatureViewBuilder:
    """Builder for creating feature views
    
    Args:
        config: Feature view configuration
        feature_df: DataFrame containing feature transformations
        entities: List of entities associated with features
    """
    def __init__(self, 
                 config: FeatureViewConfig,
                 feature_df: DataFrame,
                 entities: Union[Entity, List[Entity]]):
        self.config = config
        self.feature_df = feature_df
        self.entities = [entities] if isinstance(entities, Entity) else entities
        
    def build(self) -> FeatureView:
        """Build the feature view
        
        Returns:
            Configured FeatureView object ready for registration
        """
        # Create base feature view
        feature_view = FeatureView(
            name=self.config.full_name,
            entities=self.entities,
            feature_df=self.feature_df,
            refresh_freq=self.config.refresh_frequency,
            timestamp_col=self.config.timestamp_col,
            desc=self.config.description
        )
        
        # Add feature descriptions if provided
        if self.config.feature_descriptions:
            feature_view = feature_view.attach_feature_desc(
                self.config.feature_descriptions
            )
            
        # Apply feature selection if specified
        if self.config.selected_features:
            feature_view = feature_view.slice(self.config.selected_features)
            
        return feature_view


# %% ../nbs/03_feature_view.ipynb 7
def create_feature_view(
    config: FeatureViewConfig,
    feature_df: DataFrame,
    entities: Union[Entity, List[Entity]]
) -> FeatureView:
    """Convenience function to create a feature view
    
    Args:
        config: Feature view configuration
        feature_df: DataFrame containing feature transformations
        entities: Entity or list of entities
        
    Returns:
        Configured FeatureView object
        
    Example:
        >>> config = FeatureViewConfig(
        ...     name="customer_behavior",
        ...     domain="RETAIL",
        ...     feature_descriptions={"session_length": "Session length in minutes"}
        ... )
        >>> entity = Entity("CUSTOMER", ["customer_id"])
        >>> feature_view = create_feature_view(config, df, entity)
    """
    return FeatureViewBuilder(config, feature_df, entities).build()

